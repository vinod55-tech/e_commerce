// All Mixins here
@mixin btn($fw, $tt) {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  letter-spacing: 0px;
  text-indent: 0px;
  font-weight: $fw;
  text-transform: $tt;
  cursor: pointer;
  box-shadow: none !important;
}

@mixin content-limit($line) {
  white-space: normal;
  display: -webkit-box !important;
  -webkit-line-clamp: $line;
  -webkit-box-orient: vertical;
  overflow: hidden;
}

@mixin form-style($font, $height, $padding, $color, $bac-c, $bor-w, $bor-c, $bor-r) {
  width: 100%;
  font-size: $font;
  font-weight: 400;
  height: $height;
  padding: $padding;
  color: $color;
  background-color: $bac-c;
  border: 0;
  border: $bor-w solid $bor-c;
  border-radius: $bor-r;
  @include transition;
  font-family: $font_body;
}

@mixin box-sizing($type: border-box) {
  box-sizing: $type;
  -webkit-box-sizing: $type;
  -moz-box-sizing: $type;
}

//Add solid border
@mixin add-border($size, $color, $position: all) {
  @if $position=='top' {
    border-top: $size solid $color;
  }

  @else if $position=='bottom' {
    border-bottom: $size solid $color;
  }

  @else if $position=='right' {
    border-right: $size solid $color;
  }

  @else if $position=='left' {
    border-left: $size solid $color;
  }

  @else if $position=='top-bottom' {
    border-top: $size solid $color;
    border-bottom: $size solid $color;
  }

  @else if $position=='right-left' {
    border-left: $size solid $color;
    border-right: $size solid $color;
  }
}

//horizontal center
@mixin margin-auto {
  margin: {
    left: auto;
    right: auto;
  }
}

//links
@mixin is_link ($link, $hover, $active: $hover) {
  & {
    color: $link;

    &:hover {
      color: $hover;
    }

    &:active,
    &:focus {
      color: $active;
    }
  }
}

// Border Radius
@mixin border-radius($radius) {
  -webkit-border-radius: $radius;
  border-radius: $radius;
}

// Box Shadow
@mixin box-shadow($args...) {
  -webkit-box-shadow: $args;
  box-shadow: $args;
}

@mixin no-boxshadow {
  -webkit-box-shadow: none;
  box-shadow: none;
}

// Hide from both screenreaders and browsers
@mixin hidden {
  display: none;
  visibility: hidden;
}

@mixin display($state: 'block') {
  display: unquote($state);
  visibility: visible;
}

// Appearance
@mixin appearance ($value) {
  -webkit-appearance: $value;
  -moz-appearance: $value;
  appearance: $value;
}

// Unselectable
@mixin unselectable {
  -webkit-touch-callout: none;
  user-select: none;
}

// Regular transition
@mixin transition($what: all, $time: 0.3s, $how: ease-in-out, $delayed:0s) {
  -webkit-transition: $what $time $how $delayed;
  transition: $what $time $how $delayed;
}

@mixin no-transition {
  -webkit-transition: none;
  transition: none;
}

// generic transform
//For Multiple transform: @include transform(rotate(-20deg) scale(1) skew(-20deg) translate(-40px));
@mixin transform($transforms) {
  -webkit-transform: $transforms;
  transform: $transforms;
}

// rotate
@mixin rotate ($deg) {
  @include transform(rotate(#{$deg}deg));
}

// scale
@mixin scale($scale) {
  @include transform(scale($scale));
}

// translate
@mixin translate ($x, $y) {
  @include transform(translate($x, $y));
}

// skew
@mixin skew ($x, $y) {
  @include transform(skew(#{$x}deg, #{$y}deg));
}

//transform origin
@mixin transform-origin ($origin) {
  -webkit-transform-origin: $origin;
  transform-origin: $origin;
}

// Translate 3d
@mixin translate3d($x:0, $y:0, $z:0) {
  -ms-transform: translate3d($x, $y, $z);
  -webkit-transform: translate3d($x, $y, $z);
  transform: translate3d($x, $y, $z);
}

// Cross browser opacity
@mixin opacity($opacity) {
  opacity: $opacity;
  $opacity-ie: $opacity * 100;
  filter: alpha(opacity=$opacity-ie); //IE8
}

// Cross browser Placeholders
@mixin placeholder {
  &::-webkit-input-placeholder {
    @content;
  }

  &:-moz-placeholder {
    @content;
    @include opacity(1);
  }

  &::-moz-placeholder {
    @content;
    @include opacity(1);
  }

  &:-ms-input-placeholder {
    @content;
  }
}

// Clearfix
@mixin clearfix() {

  &:after,
  &:before {
    content: "";
    display: table;
  }

  &:after {
    clear: both;
  }
}

//No clearfix
@mixin no-clearfix {

  &:after,
  &:before {
    display: none;
  }
}

// Absolute cover
@mixin cover-all($position:absolute) {
  position: $position;
  top: 0;
  bottom: 0;
  left: 0;
  right: 0;
}

// Absolute center
@mixin absolutecenter($axis: "both") {
  position: absolute;

  @if $axis=="y" {
    top: 50%;
    @include translate (0, -50%);
  }

  @if $axis=="x" {
    left: 50%;
    @include translate (-50%, 0);
  }

  @if $axis=="both" {
    top: 50%;
    left: 50%;
    @include translate (-50%, -50%);
  }
}

// Calc
@mixin calc($prop, $val) {

  @each $pre in -webkit-,
  -moz- {
    #{$prop}: $pre+calc(#{$val});
  }

  #{$prop}: calc(#{$val});
}

// Media queries
@mixin breakpoint($point) {
  @if $point==largeDesktop {
    @media only screen and (min-width: 1600px) {
      @content;
    }
  }

  @else if $point==desktop {
    @media only screen and (max-width: 1599.98px) {
      @content;
    }
  }

  @else if $point==laptop {
    @media only screen and (max-width: 1399.98px) {
      @content;
    }
  }

  @else if $point==normal {
    @media only screen and (max-width: 1199.98px) {
      @content;
    }
  }

  @else if $point==ipad {
    @media only screen and (max-width: 991.98px) {
      @content;
    }
  }

  @else if $point==mobile {
    @media only screen and (max-width: 767.98px) {
      @content;
    }
  }

  @else if $point==mobile-s {
    @media only screen and (max-width: 479.98px) {
      @content;
    }
  }

  @else if $point==min-ipad {
    @media only screen and (min-width: 768px) {
      @content;
    }
  }
}

//Circle
@mixin circle($size) {
  height: $size;
  width: $size;
  @include border-radius(100%);
}

//Aspect Ratio
// usage: @include aspect-ratio(16,9);
@mixin aspect-ratio($width, $height) {
  position: relative;

  &:before {
    display: block;
    content: "";
    width: 100%;
    padding-top: ($height / $width) * 100%;
  }

  > :first-child {
    position: absolute;
    top: 0;
    left: 0;
    height: 100%;
    width: 100%;
  }
}

//px to em
//$base-font-size: 18; // base font size for em to px conversion
@function em($pixels, $context: $base-font-size) {
  @return #{$pixels/$context}em;
}

//Letter spacing
@mixin letter-spacing($ps-tracking) {
  letter-spacing: #{$ps-tracking / 1000}em;
}

//custom counter increment
//@include auto-numbers(li, ". ", item, ul);
@mixin auto-numbers($numbered-element, $sep, $counter: item, $nested-parent: false) {
  $sel: ();

  @if $nested-parent {
    $sel: append($sel, unquote($nested-parent));

    #{$nested-parent} {
      list-style: none;
      margin-left: 0;
    }
  }

  $sel: append($sel, unquote('&'), comma);

  #{$sel} {
    counter-reset: #{$counter};

    >#{$numbered-element} {
      &:before {
        counter-increment: #{$counter};
        content: if($nested-parent, counters(#{$counter}, "#{$sep} ") "#{$sep} ", counter(#{$counter}) "#{$sep} ");
      }
    }
  }
}

//Show 3 dots after text without wrapping down
@mixin text-truncate {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

//Keyframes animations
//  @include animation(ballLoader, 1.4s, infinite, ease-in-out, both, 0s);
@mixin animation ($animation, $duration, $count:1, $transition:linear, $fill:forwards, $delay:0s) {
  -webkit-animation: $animation $duration $count $transition $fill $delay;
  animation: $animation $duration $count $transition $fill $delay;
}

@mixin keyframes($animationName) {
  @-webkit-keyframes #{$animationName} {
    @content;
  }

  @keyframes #{$animationName} {
    @content;
  }
}

//Background properties
//Usage @include bg-cover(cover, top left);
@mixin bg-cover($size : cover, $position: center) {
  background-repeat: no-repeat;
  background-size: $size;
  background-position: $position;
}

// gradients
// usage @include linearGradient(#cccccc, #666666);
@mixin linearGradient($top, $bottom) {
  background: $top;
  /* Old browsers */
  background: -moz-linear-gradient(top, $top 0%, $bottom 100%);
  /* FF3.6+ */
  background: -webkit-linear-gradient(top, $top 0%, $bottom 100%);
  /* Chrome10+,Safari5.1+ */
  background: -ms-linear-gradient(top, $top 0%, $bottom 100%);
  /* IE10+ */
  background: linear-gradient(to bottom, $top 0%, $bottom 100%);
  /* W3C */
}

//Flexbox concept
@mixin flexbox {
  display: -webkit-box; // old
  display: -moz-box; // old
  display: -ms-flexbox; // ie
  display: -webkit-flex; // new
  display: flex; // new
}

// The 'flex' shorthand
// - applies to: flex items
// <positive-number>, initial, auto, or none
@mixin flex($align:center, $justify:space-between, $wrap:wrap) {
  display: flex;
  align-items: $align;
  justify-content: $justify;
  flex-wrap: $wrap;
}

//Flex direction
@mixin flex-direction($direction) {
  @if $direction==column {
    flex-direction: column;
  }

  @else {
    flex-direction: $direction;
  }
}

// Flex Line Wrapping
// - applies to: flex containers
// nowrap | wrap | wrap-reverse
@mixin flex-wrap($wrap) {
  flex-wrap: $wrap;
}

// Flex Direction and Wrap
// - applies to: flex containers
// <flex-direction> || <flex-wrap>
@mixin flex-flow($flow) {
  flex-flow: $flow;
}

// Display Order
// - applies to: flex items
// <integer>
@mixin order($val) {
  order: $val;
}

// Flex grow factor
// - applies to: flex items
// <number>
@mixin flex-grow($grow) {
  flex-grow: $grow;
}

// Flex shrink
// - applies to: flex item shrink factor
// <number>
@mixin flex-shrink($shrink) {
  flex-shrink: $shrink;
}

// Flex basis
// - the initial main size of the flex item
// - applies to: flex itemsnitial main size of the flex item
// <width>
@mixin flex-basis($width) {
  -webkit-flex-basis: $width;
  -moz-flex-basis: $width;
  -ms-flex-basis: $width;
  flex-basis: $width;
}

// Axis Alignment
// - applies to: flex containers
// flex-start | flex-end | center | space-between | space-around
@mixin justify-content($justify) {
  justify-content: $justify;
}

// Packing Flex Lines
// - applies to: multi-line flex containers
// flex-start | flex-end | center | space-between | space-around | stretch
@mixin align-content($align) {
  align-content: $align;
}

// Cross-axis Alignment
// - applies to: flex containers
// flex-start | flex-end | center | baseline | stretch
@mixin align-items($align) {
  align-items: $align;
}

// Cross-axis Alignment
// - applies to: flex items
// auto | flex-start | flex-end | center | baseline | stretch
@mixin align-self($align) {
  align-self: $align;
}

//width in %age
@mixin width($required, $total) {
  width: (($required/$total) * 100%);
}

//Line height
@mixin lineheight($font-size, $psValue) {
  line-height: $psValue/$font-size;
}

// Flex Defaults
// usage: @include flex-defaults(row,flex-end,space-between,wrap);
@mixin flex-defaults($direction:row, $alignItems:center, $justify:space-between, $wrap:wrap) {
  @include flexbox;
  @include flex-direction($direction);
  @include align-items($alignItems);
  @include justify-content($justify);
  @include flex-wrap($wrap);
}